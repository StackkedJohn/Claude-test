version: '3.8'

services:
  # Frontend (React/Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:5000
      - REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_51234567890abcdef
      - REACT_APP_GA4_MEASUREMENT_ID=G-XXXXXXXXXX
      - REACT_APP_GTM_ID=GTM-XXXXXXX
      - REACT_APP_CDN_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - icepaca-dev
    stdin_open: true
    tty: true
    restart: unless-stopped

  # Backend (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "5000:5000"
      - "9229:9229"  # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=mongodb://mongodb:27017/icepaca-dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - SESSION_SECRET=dev-session-secret-change-in-production
      - STRIPE_SECRET_KEY=sk_test_51234567890abcdef
      - STRIPE_WEBHOOK_SECRET=whsec_test_1234567890abcdef
      - EMAIL_SERVICE=gmail
      - EMAIL_USER=dev@icepaca.com
      - EMAIL_PASS=dev-email-password
      - CLOUDINARY_CLOUD_NAME=icepaca-dev
      - CLOUDINARY_API_KEY=123456789012345
      - CLOUDINARY_API_SECRET=dev-cloudinary-secret
      - BACKUP_ENABLED=false
      - ANALYTICS_ENABLED=false
      - DEBUG=icepaca:*
    depends_on:
      - mongodb
      - redis
    networks:
      - icepaca-dev
    restart: unless-stopped
    command: npm run dev

  # Database (MongoDB)
  mongodb:
    image: mongo:7
    container_name: icepaca-mongodb-dev
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=dev-password
      - MONGO_INITDB_DATABASE=icepaca-dev
    volumes:
      - mongodb_data:/data/db
      - ./scripts/db-init:/docker-entrypoint-initdb.d:ro
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Redis (Caching & Sessions)
  redis:
    image: redis:7-alpine
    container_name: icepaca-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: icepaca-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/var/www/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Adminer (Database Management)
  adminer:
    image: adminer:4.8.1
    container_name: icepaca-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mongodb
      - ADMINER_DESIGN=pepa-linha
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: icepaca-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: icepaca-mailhog-dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: icepaca-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: icepaca-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - icepaca-dev
    restart: unless-stopped

  # Blockchain Node (Simplified)
  blockchain:
    build:
      context: ./blockchain
      dockerfile: Dockerfile.dev
    container_name: icepaca-blockchain-dev
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - BLOCKCHAIN_PORT=3002
      - GENESIS_DIFFICULTY=4
    volumes:
      - ./blockchain:/app
      - blockchain_data:/app/data
    networks:
      - icepaca-dev
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  blockchain_data:
    driver: local

networks:
  icepaca-dev:
    driver: bridge
    labels:
      - "traefik.enable=false"